
@model IEnumerable<TripAdvertisement.Models.Locations>

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<link href="http://netdna.bootstrapcdn.com/font-awesome/4.0.0/css/font-awesome.css" rel="stylesheet">

    <link rel="stylesheet" type="text/css" href="http://cdn.leafletjs.com/leaflet-0.7.2/leaflet.css" />
    <script src="http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.js"></script>
    <script src="~/Scripts/jquery-3.2.1.min.js"></script>
    <script src="~/Scripts/jquery-3.2.1.js"></script>

<script src="~/dist/leaflet.awesome-markers.js"></script>
<link rel="stylesheet" href="~/dist/leaflet.awesome-markers.css">

<link href="../Content/font-awesome.min.css" rel="stylesheet" />
<div class="row">
    <span></span>
</div>
<div class="row">
    
        <div class="col-lg-1"></div>
        <div class="col-lg-10" id="map" style="height: 440px; border: 1px solid #AAA;"></div>
        <div class="col-lg-1"></div>
        
    </div>

<div class="row">
    <div class="col-lg-1"></div>
    <div class="col-lg-10">
        <input type="button" value="Locate me!" onClick="getLocationLeaflet()" />
        <input type="button" value="Search" onclick="getNearbyPlaces()" />
    </div>
    <div class="col-lg-1"></div>
</div>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-inline">
   
        <div class="form-group">
            @Html.Label("Type", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("ListItem1", null, htmlAttributes: new { @class = "form-control" }) 
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Rating", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("ListItem2", null, htmlAttributes: new { @class = "form-control" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Radius", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("ListItem3", null, htmlAttributes: new { @class = "form-control" })
            </div>
        </div>
</div>

}

    <script type="text/javascript">
            var map = L.map('map', {

                center: [39.773245, -86.151183],
                minZoom: 10,
                zoom: 18
            });

          //  L.marker([39.773245, -86.151183], { icon: L.AwesomeMarkers.icon({ icon: 'link', prefix: 'glyphicon', markerColor: 'red', spin: true }) }).addTo(map);

            L.marker([39.773245, -86.151183]).addTo(map).bindPopup('here we live , here we dream !!!.').openPopup();
            map.attributionControl.setPrefix(''); // Don't show the 'Powered by Leaflet' text.

            $.ajax({
                type: "POST",
                url: '/Maps/GetMap',
                success: function (data) {
                    var result = JSON.stringify(data);

                    for (var i = 0; i < data.length; ++i)
                    {
                        var popup ='<br>Name:</br> '+ data[i].Name  +
                        '<br/><br>Latitude:</br> ' + data[i].Latitude +
                          '<br/><br>Longitude:</br> ' + data[i].Logtitude+
                       '<br/><b>Area:</br> ' + data[i].Area;

                        var redMarker = L.AwesomeMarkers.icon({
                            icon: 'coffee',
                            markerColor: 'red',
                            prefix: 'fa',
                            //spin : true,
                            iconColor: 'black'
                        });

                        L.marker([data[i].Latitude, data[i].Logtitude], { icon: redMarker }, { Title: 'Hello' }).bindPopup(popup).addTo(map);
                        //L.marker([data[i].Latitude, data[i].Logtitude])
                        //    .bindPopup(popup)
                        //   .addTo(map);
                    }

                },
                error: function (xhr) {

                    console.log(xhr.responseText);
                    alert("Error has occurred..");
                }
            });


            L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {
                attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors'
            }).addTo(map);
       

        function onLocationFound(e) {
            var radius = e.accuracy / 2;
            var location = e.latlng
            var redMarker = L.AwesomeMarkers.icon({
                icon: 'home',
                markerColor: 'red' ,
                prefix: 'fa',
                iconColor: 'black'
            });
          
            L.marker(location, { icon: redMarker }).addTo(map);
            L.circle(location, radius).addTo(map);

            var model = new Object();
            model.Altitude = e.latlng.lat;
            model.Longtitude = e.latlng.lng;
            jQuery.ajax({
                            type: "POST",
                            url: "@Url.Action("LocateUser")",
                dataType: "json",
            contentType: "application/json; charset=utf-8",
            data: JSON.stringify({ coordinates: model }),
            success: function (data) {
                alert(data);
            },
            failure: function (errMsg) {
                alert(errMsg);
            }
            });


            //alert("Lat,Lon :" + e.latlng.lat + " , " + e.latlng.lng)
        }

        function onLocationError(e) {
            alert(e.message);
        }
        function getLocationLeaflet() {
            map.on('locationfound', onLocationFound);
            map.on('locationerror', onLocationError);
            map.locate({ setView: true, maxZoom: 16 });
        }
        function getNearbyPlaces() {
            $.ajax({
                type: "POST",
                url: '/Maps/Search',
                success: function (Places) {
                    var result = JSON.stringify(Places);

                    for (var i = 0; i < Places.length; ++i) {
                        var popup = '<br>Name: ' + Places[i].Name +
                        '<br/>Address:' + Places[i].Address +
                          '<br/>Rating: ' + Places[i].Rating +
                       '<br/>Phone Number: ' + Places[i].PhoneNum +
                      '<br/>International Phone Number: ' + Places[i].InternationalPhoneNum;
                        //'<br/><b>Open Now:</br> ' + Places[i].OpenNow ;

                        var redMarker = L.AwesomeMarkers.icon({
                            icon: 'coffee',
                            markerColor: 'blue',
                            prefix: 'fa',
                            //spin: true,
                            iconColor: 'black'
                        });
                        L.marker([Places[i].Altitude, Places[i].Longtitude], { icon: redMarker }).bindPopup(popup).addTo(map);
                    }

                },
                error: function (xhr) {

                    console.log(xhr.responseText);
                    alert("Error has occurred..");
                }
            });
        }

    </script>
